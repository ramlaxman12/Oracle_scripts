The following query displays the data protection mode, data protection level, database role, and switchover status for a primary, physical standby or snapshot standby database:

SQL> SELECT PROTECTION_MODE, PROTECTION_LEVEL, 
	DATABASE_ROLE ROLE, SWITCHOVER_STATUS 
  	FROM V$DATABASE;

----The following query displays fast-start failover status:

SQL> SELECT FS_FAILOVER_STATUS "FSFO STATUS",FS_FAILOVER_CURRENT_TARGET TARGET,FS_FAILOVER_THRESHOLD THRESHOLD,FS_FAILOVER_OBSERVER_PRESENT "OBSERVER PRESENT" FROM V$DATABASE;



The following query displays Redo Apply and redo transport status on a physical standby database:

SQL> SELECT PROCESS, STATUS, THREAD#, SEQUENCE#,BLOCK#, BLOCKS FROM V$MANAGED_STANDBY;
 
PROCESS STATUS       THREAD#    SEQUENCE#  BLOCK#     BLOCKS
------- ------------ ---------- ---------- ---------- ----------
RFS     ATTACHED     1          947        72         72
MRP0    APPLYING_LOG 1          946        10         72

The sample output shows that a RFS process completed archiving a redo log file with a sequence number of 947 and that Redo Apply is actively applying an archived redo log file with a sequence number of 946. Redo Apply is currently recovering block number 10 of the 72-block archived redo log file.



The following query displays information about archived redo log files that have been received by a physical or snapshot standby database from a primary database:

SQL> SELECT THREAD#,SEQUENCE#, FIRST_CHANGE#,NEXT_CHANGE# FROM V$ARCHIVED_LOG;
 
THREAD#    SEQUENCE#  FIRST_CHANGE# NEXT_CHANGE#
---------- ---------- ------------- ------------
1          945        74651         74739
1          946        74739         74772
1          947        74772         7474

The sample output shows that three archived redo log files have been received from the primary database.


9.5.1.4 V$LOG_HISTORY
The following query displays archived log history information:

SQL> SELECT THREAD#, SEQUENCE#, FIRST_CHANGE#,NEXT_CHANGE# FROM V$LOG_HISTORY;

9.5.1.5 V$DATAGUARD_STATUS
The following query displays messages generated by Data Guard events that caused a message to be written to the alert log or to a server process trace file:

SQL> SELECT MESSAGE FROM gV$DATAGUARD_STATUS;

SELECT PROCESS, STATUS FROM V$MANAGED_STANDBY;

set linesize 200 pagesize 200
select PROCESS,STATUS,THREAD#,SEQUENCE# from gV$MANAGED_STANDBY where THREAD#='&4' or process like'MRP%' order by 4;

SELECT ARCH.THREAD# "Thread", ARCH.SEQUENCE# "Last Sequence Received", APPL.SEQUENCE# "Last Sequence Applied", (ARCH.SEQUENCE# - APPL.SEQUENCE#) "Difference"
          FROM
         (SELECT THREAD# ,SEQUENCE# FROM V$ARCHIVED_LOG WHERE (THREAD#,FIRST_TIME ) IN (SELECT THREAD#,MAX(FIRST_TIME) FROM gV$ARCHIVED_LOG GROUP BY THREAD#)) ARCH,
         (SELECT THREAD# ,SEQUENCE# FROM V$LOG_HISTORY WHERE (THREAD#,FIRST_TIME ) IN (SELECT THREAD#,MAX(FIRST_TIME) FROM gV$LOG_HISTORY GROUP BY THREAD#)) APPL
         WHERE
         ARCH.THREAD# = APPL.THREAD#
          ORDER BY 1;


set linesize 180
col Values for a70
col Recovery_start for a21
select to_char(START_TIME,'dd.mm.yyyy hh24:mi:ss') "Recovery_start",
to_char(item)||' = '||to_char(sofar)||' '||to_char(units)||' '|| to_char(TIMESTAMP,'dd.mm.yyyy hh24:mi') "Values" 
from v$recovery_progress 
where start_time=(select max(start_time) from v$recovery_progress);


set linesize 200 pagesize 200
col ITEM for a25
col UNITS for a20
col start_time for a30
col type for a30
col TIMESTAMP for a30
select to_char(start_time,'dd-mon-yyyy HH:MI:SS') start_time, type, item, units, sofar, total, to_char(timestamp,'dd-mon-yyyy HH:MI:SS') timestamp 
from gv$recovery_progress where item like '%Apply Rate';


col Archive_dest for a40
set linesize 200 pagesize 200
SELECT DEST_ID "ID",STATUS "DB_status",DESTINATION "Archive_dest",ERROR "Error" FROM V$ARCHIVE_DEST;


SELECT DEST_ID "ID",STATUS "DB_status",
DESTINATION "Archive_dest",
ERROR "Error"
FROM V$ARCHIVE_DEST;

alter database recover managed standby database cancel;

alter database recover managed standby database disconnect from session using current logfile;

alter database recover managed standby database disconnect from session;


ALTER DATABASE RECOVER MANAGED STANDBY DATABASE NODELAY;

https://support.oracle.com/epmos/faces/DocumentDisplay?_afrLoop=466334156746134&id=836986.1&_afrWindowMode=0&_adf.ctrl-state=m9610vfol_4




select thread#, max(sequence#) "Last Primary Seq Generated"
from v$archived_log val, v$database vdb
where val.resetlogs_change# = vdb.resetlogs_change#
group by thread# order by 1;

##################################################################################################


1)On the Standby, find the MRP pid:
select process,pid from V$managed_standby where process like '%MRP%';

2)To turn on the tracing:
SQL> oradebug setospid <MRPPID>
SQL> oradebug unlimit
SQL> oradebug Event 10046 trace name context forever, level 12

3) Wait about 10mins

4) To turn off the tracing:
SQL> oradebug setospid <MRPPID>
SQL> oradebug Event 10046 trace name context off
SQL> oradebug tracefile_name

 

Trace file shown below waits:

'parallel recovery coordinator idle wait'

 

Solution: 

Start the MRP with one of the less parallelism OR serial recovery

Less parallelism:

SQL> RECOVER MANAGED STANDBY DATABASE PARALLEL 12 USING CURRENT LOGFILE DISCONNECT FROM SESSION;

Serial Recovery:

SQL> RECOVER MANAGED STANDBY DATABASE NOPARALLEL USING CURRENT LOGFILE DISCONNECT FROM SESSION;








